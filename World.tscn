[gd_scene load_steps=14 format=3 uid="uid://d1ghg8r3bpboh"]

[ext_resource type="Script" path="res://addons/sdf_rdt/sdf_container.gd" id="1_4lvc6"]
[ext_resource type="Script" path="res://addons/sdf_rdt/sdf_box.gd" id="2_4f4q8"]
[ext_resource type="Script" path="res://addons/sdf_rdt/sdf_sphere.gd" id="3_nom7a"]
[ext_resource type="PackedScene" uid="uid://bdm56ujj65teb" path="res://Player/Player.tscn" id="4_o2jjx"]
[ext_resource type="Script" path="res://addons/sdf_rdt/sdf_torus.gd" id="5_ev7mj"]
[ext_resource type="PackedScene" uid="uid://bsi6feik85wmn" path="res://Hierarch/hierarch.tscn" id="6_eayxi"]
[ext_resource type="PackedScene" uid="uid://c6b8prnjgm61h" path="res://GUI/hud.tscn" id="7_tv8if"]

[sub_resource type="Shader" id="Shader_dtrv5"]
code = "shader_type spatial;
//render_mode unshaded;//, depth_draw_opaque;

uniform mat4 u_shape0_transform;
uniform vec4 u_shape0_color;
uniform float u_shape0_smoothness;
uniform float u_shape0_layer;
uniform vec3 u_shape0_size;
uniform float u_shape0_rounding;
uniform mat4 u_shape1_transform;
uniform vec4 u_shape1_color;
uniform float u_shape1_smoothness;
uniform float u_shape1_layer;
uniform vec3 u_shape1_size;
uniform float u_shape1_rounding;
uniform mat4 u_shape2_transform;
uniform vec4 u_shape2_color;
uniform float u_shape2_smoothness;
uniform float u_shape2_layer;
uniform float u_shape2_radius;
uniform mat4 u_shape3_transform;
uniform vec4 u_shape3_color;
uniform float u_shape3_smoothness;
uniform float u_shape3_layer;
uniform vec3 u_shape3_size;
uniform float u_shape3_rounding;
uniform mat4 u_shape4_transform;
uniform vec4 u_shape4_color;
uniform float u_shape4_smoothness;
uniform float u_shape4_layer;
uniform float u_shape4_radius;
uniform float u_shape4_thickness;

uniform float shrink = 1.0;

const int MAX_STEPS = 64;
const float MAX_DISTANCE = 100.0;
const float SURFACE_DISTANCE = 0.005;
const float NORMAL_PRECISION = 0.0005;

void vertex() {
	POSITION = vec4(VERTEX, 1.0);
}

float get_sphere(vec3 p, vec3 center, float radius) {
	return length(p - center) - radius;
}

float get_box(vec3 p, vec3 b) {
	vec3 q = abs(p) - b;
	return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float get_rounded_box(vec3 p, vec3 b, float r) {
	vec3 q = abs(p) - b;
	return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;
}

float get_torus(vec3 p, vec2 r) {
	vec2 q = vec2(length(p.xz) - r.x, p.y);
	return length(q) - r.y;
}

float get_rounded_cylinder(vec3 p, float radius, float rounding, float h) {
	vec2 d = vec2(length(p.xz) - radius + rounding, abs(p.y) - h);
	return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - rounding;
}

// Note: `union` is a reserved keyword but Godot doesn't seem to catch that
float sharp_union(float a, float b) {
	return min(a, b);
}

float smooth_union(float a, float b, float k) {
	float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
	return mix(b, a, h) - k * h * (1.0 - h);
}

vec4 smooth_union_c(float da, float db, vec3 ca, vec3 cb, float k) {
	float h = clamp(0.5 + 0.5 * (db - da) / k, 0.0, 1.0);
	float d = mix(db, da, h) - k * h * (1.0 - h);
	vec3 col = mix(cb, ca, h);
	return vec4(col, d);
}

vec3 smooth_color(float da, float db, vec3 ca, vec3 cb, float k) {
	float h = clamp(0.5 + 0.5 * (db - da) / k, 0.0, 1.0);
	vec3 col = mix(cb, ca, h);
	return col;
}

vec4 smooth_subtract_c(float db, float da, vec3 ca, vec3 cb, float k) {
	float h = clamp(0.5 - 0.5 * (db + da) / k, 0.0, 1.0);
    float d = mix(db, -da, h) + k * h * (1.0 - h);
	vec3 col = mix(ca, cb, h);
	return vec4(col, d);
}

float subtract(float a, float b) {
	return max(a, -b);
}

float intersect(float a, float b) {
	return max(a, b);
}

vec3 repeat_domain_inf(vec3 p, vec3 c) {
	return mod(p + 0.5 * c, c) - 0.5 * c;
}

vec3 repeat_domain(vec3 p, vec3 c, vec3 l) {
	return p - c * clamp(round(p / c), -l, l);
}

//<functions>
//</functions>

vec4 get_scene(vec3 p, float time, vec3 world_cam_pos) {
	vec4 s = vec4(1.0, 1.0, 1.0, 99999.0);
	
	
	s = smooth_union_c(s.w, max(-1.*get_sphere(p,world_cam_pos,3.5)-.4*u_shape0_layer, get_rounded_box((u_shape0_transform * vec4(p, shrink)).xyz, u_shape0_size * shrink , u_shape0_rounding)+ smoothstep(2.,4.,shrink)*( shrink* .02*sin(TIME*4.+p.x*20./shrink) )), s.rgb, u_shape0_color.rgb, u_shape0_smoothness);
	s = smooth_union_c(s.w, max(-1.*get_sphere(p,world_cam_pos,3.5)-.4*u_shape1_layer, get_rounded_box((u_shape1_transform * vec4(p, shrink)).xyz, u_shape1_size * shrink , u_shape1_rounding)+ smoothstep(2.,4.,shrink)*( shrink* .02*sin(TIME*4.+p.x*20./shrink) )), s.rgb, u_shape1_color.rgb, u_shape1_smoothness);
	s = smooth_union_c(s.w, max(-1.*get_sphere(p,world_cam_pos,3.5)-.4*u_shape2_layer, get_sphere((u_shape2_transform * vec4(p, shrink)).xyz, vec3(0.0), u_shape2_radius * shrink)+ smoothstep(2.,4.,shrink)*( shrink* .02*sin(TIME*4.+p.x*20./shrink) )), s.rgb, u_shape2_color.rgb, u_shape2_smoothness);
	s = smooth_union_c(s.w, max(-1.*get_sphere(p,world_cam_pos,3.5)-.4*u_shape3_layer, get_rounded_box((u_shape3_transform * vec4(p, shrink)).xyz, u_shape3_size * shrink , u_shape3_rounding)+ smoothstep(2.,4.,shrink)*( shrink* .02*sin(TIME*4.+p.x*20./shrink) )), s.rgb, u_shape3_color.rgb, u_shape3_smoothness);
	s = smooth_union_c(s.w, max(-1.*get_sphere(p,world_cam_pos,3.5)-.4*u_shape4_layer, get_torus((u_shape4_transform * vec4(p, shrink)).xyz, vec2(u_shape4_radius, u_shape4_thickness))+ smoothstep(2.,4.,shrink)*( shrink* .02*sin(TIME*4.+p.x*20./shrink) )), s.rgb, u_shape4_color.rgb, u_shape4_smoothness);
	
	return s;
}

vec3 get_normal(vec3 p, float time, vec3 world_cam_pos) {
	float d = get_scene(p, time, world_cam_pos).w;
	vec2 e = vec2(NORMAL_PRECISION, 0.0);
	vec3 n = d - vec3(
		get_scene(p - e.xyy, time, world_cam_pos).w,
		get_scene(p - e.yxy, time, world_cam_pos).w,
		get_scene(p - e.yyx, time, world_cam_pos).w);
	return normalize(n);
}

vec4 raymarch(vec3 ray_origin, vec3 ray_dir, out vec3 out_normal, float time, vec3 world_cam_pos) {
	// Sphere marching
	float d = 0.0;
	vec3 rgb;
	for (int i = 0; i < MAX_STEPS; ++i) {
		vec3 p = ray_origin + ray_dir * d;
		vec4 scene_info = get_scene(p, time, world_cam_pos);
		rgb = scene_info.rgb;
		float ds = scene_info.w;
		d += ds;
		if (d > MAX_DISTANCE || ds < SURFACE_DISTANCE) {
			break;
		}
	}

	vec3 hit_pos = ray_origin + ray_dir * d;
	out_normal = get_normal(hit_pos, time, world_cam_pos);

	return vec4(rgb, d);
}

void fragment() {
	// Could certainly be optimized I think
	vec3 ndc = vec3(SCREEN_UV, 0.0) * 2.0 - 1.0;
	vec4 view_coords = INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
	view_coords.xyz /= view_coords.w;
	vec3 world_cam_pos = (INV_VIEW_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	vec4 world_coords = INV_VIEW_MATRIX * vec4(view_coords.xyz, 1.0);
	
	vec3 ray_origin = world_coords.xyz;
	vec3 ray_dir = normalize(world_coords.xyz - world_cam_pos);
	
	float time = 0.0;
	
	vec3 normal;
	vec4 rm = raymarch(ray_origin, ray_dir, normal, time, world_cam_pos);
	float d = rm.w;
	
	if (d > MAX_DISTANCE) {
		discard;
	}
	
	vec4 sdf_ndc = PROJECTION_MATRIX * VIEW_MATRIX * vec4(ray_origin + ray_dir * d, 1.0);
	DEPTH = (sdf_ndc.z / sdf_ndc.w) * 0.5 + 0.5;
	NORMAL = (VIEW_MATRIX * vec4(normal, 0.0)).xyz;
	
	//ALBEDO = ray_dir * 0.1;
	ALBEDO = rm.rgb;
	//ALBEDO = normal;
	/*if(d > 0.0) {
		ALBEDO = vec3(0.0, 1.0, 0.0);
	}*/
}

"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ic4gm"]
render_priority = 0
shader = SubResource("Shader_dtrv5")
shader_parameter/u_shape4_transform = Transform3D(0.409923, -0.91212, 0, 0.912119, 0.409923, 0, 0, 0, 1, 0.520795, -0.234054, 0)
shader_parameter/u_shape4_thickness = 0.505737
shader_parameter/u_shape4_smoothness = 0.2
shader_parameter/u_shape4_radius = 3.87791
shader_parameter/u_shape4_layer = 1.0
shader_parameter/u_shape4_color = Color(0.356863, 0.305882, 0.54902, 1)
shader_parameter/u_shape3_transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.74273, -0.511418, 2.03447)
shader_parameter/u_shape3_smoothness = 0.2
shader_parameter/u_shape3_size = Vector3(1, 1, 1)
shader_parameter/u_shape3_rounding = 0.0
shader_parameter/u_shape3_layer = 0.0
shader_parameter/u_shape3_color = Color(1, 1, 1, 1)
shader_parameter/u_shape2_transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5.33023, 0, 3.46965)
shader_parameter/u_shape2_smoothness = 0.2
shader_parameter/u_shape2_radius = 2.14419
shader_parameter/u_shape2_layer = 2.0
shader_parameter/u_shape2_color = Color(1, 0.152941, 0.643137, 1)
shader_parameter/u_shape1_transform = Transform3D(0.920791, -0.390056, -2.5332e-07, 0.352, 0.830954, 0.430826, -0.168046, -0.396701, 0.902435, -3.96142, -0.697754, 0.333111)
shader_parameter/u_shape1_smoothness = 0.2
shader_parameter/u_shape1_size = Vector3(3.93457, 0.267678, 12.1113)
shader_parameter/u_shape1_rounding = 0.0
shader_parameter/u_shape1_layer = 1.0
shader_parameter/u_shape1_color = Color(0.0431373, 1, 0.329412, 1)
shader_parameter/u_shape0_transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -6.67584, 0.184362, 8.35753)
shader_parameter/u_shape0_smoothness = 0.2
shader_parameter/u_shape0_size = Vector3(6.06672, 4.75508, 4.02295)
shader_parameter/u_shape0_rounding = 0.0
shader_parameter/u_shape0_layer = 0.0
shader_parameter/u_shape0_color = Color(0, 0.203922, 1, 1)
shader_parameter/shrink = 1.0

[sub_resource type="PlaneMesh" id="PlaneMesh_tfq86"]
flip_faces = true
orientation = 2

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_6jpg1"]
sky_top_color = Color(0.160784, 0.678431, 1, 1)
sky_curve = 0.504539
ground_bottom_color = Color(0.0901961, 0.188235, 0.2, 1)

[sub_resource type="Sky" id="Sky_us488"]
sky_material = SubResource("ProceduralSkyMaterial_6jpg1")
process_mode = 3

[sub_resource type="Environment" id="Environment_gslwi"]
background_mode = 2
background_color = Color(0.129412, 0.490196, 0.741176, 1)
sky = SubResource("Sky_us488")

[node name="Node3d" type="Node3D"]

[node name="Player" parent="." instance=ExtResource("4_o2jjx")]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.31504, 3.50588)

[node name="SDFContainer" type="MeshInstance3D" parent="."]
unique_name_in_owner = true
material_override = SubResource("ShaderMaterial_ic4gm")
extra_cull_margin = 16384.0
mesh = SubResource("PlaneMesh_tfq86")
script = ExtResource("1_4lvc6")

[node name="SDFBox" type="Node3D" parent="SDFContainer"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 6.67584, -0.184362, -8.35753)
script = ExtResource("2_4f4q8")
size = Vector3(6.06672, 4.75508, 4.02295)
rounding = 0.0
operation = 0
color = Color(0, 0.203922, 1, 1)
layer = 0.0

[node name="SDFBox2" type="Node3D" parent="SDFContainer"]
transform = Transform3D(0.920791, 0.352, -0.168046, -0.390056, 0.830954, -0.396701, 0, 0.430826, 0.902435, 3.94923, -0.83323, 0)
script = ExtResource("2_4f4q8")
size = Vector3(3.93457, 0.267678, 12.1113)
rounding = 0.0
operation = 0
color = Color(0.0431373, 1, 0.329412, 1)
layer = 1.0

[node name="Pinkball" type="Node3D" parent="SDFContainer"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.33023, 0, -3.46965)
script = ExtResource("3_nom7a")
radius = 2.14419
operation = 0
color = Color(1, 0.152941, 0.643137, 1)
layer = 2.0

[node name="SDFBox3" type="Node3D" parent="SDFContainer"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2.74273, 0.511418, -2.03447)
script = ExtResource("2_4f4q8")
size = Vector3(1, 1, 1)
rounding = 0.0
operation = 0
layer = 0.0

[node name="SDFTorus" type="Node3D" parent="SDFContainer"]
transform = Transform3D(0.409923, 0.912121, 0, -0.91212, 0.409923, 0, 0, 0, 1, 0, 0.570972, 0)
script = ExtResource("5_ev7mj")
radius = 3.87791
thickness = 0.505737
operation = 0
color = Color(0.356863, 0.305882, 0.54902, 1)
layer = 1.0

[node name="DirectionalLight3d" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.111727, -0.0785847, 0.990627, 0.0413513, 0.995637, 0.0836459, -0.992878, 0.0503092, -0.10799, 0, 3.2076, 7.80617)

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_gslwi")

[node name="Hierarch" parent="." instance=ExtResource("6_eayxi")]
unique_name_in_owner = true

[node name="HUD" parent="." instance=ExtResource("7_tv8if")]
